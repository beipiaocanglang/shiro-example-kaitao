[main]
# 自定义authorizer 更改Authorizer实现
# 对于ModularRealmAuthorizer，相应的AuthorizingSecurityManager会在初始化完成后自动将相应的realm设置进去，
# 我们也可以通过调用其setRealms()方法进行设置。
# 对于实现自己的authorizer可以参考ModularRealmAuthorizer实现即可
authorizer=org.apache.shiro.authz.ModularRealmAuthorizer

# 设置ModularRealmAuthorizer的permissionResolver，
# 其会自动设置到相应的Realm上（其实现了PermissionResolverAware接口）
#permissionResolver=org.apache.shiro.authz.permission.WildcardPermissionResolver
# 自定义permissionResolver
permissionResolver=com.github.zhangkaitao.shiro.chapter3.permission.BitAndWildPermissionResolver
authorizer.permissionResolver=$permissionResolver

# 自定义rolePermissionResolver
# 设置ModularRealmAuthorizer的rolePermissionResolver，
# 其会自动设置到相应的Realm上（其实现了RolePermissionResolverAware接口）
rolePermissionResolver=com.github.zhangkaitao.shiro.chapter3.permission.MyRolePermissionResolver
authorizer.rolePermissionResolver=$rolePermissionResolver

securityManager.authorizer=$authorizer

# 自定义realm 一定要放在securityManager.authorizer赋值之后
# 因为调用setRealms会将realms设置给authorizer，并给各个Realm设置permissionResolver和rolePermissionResolver.
# 另外，不能使用IniSecurityManagerFactory创建的IniRealm，因为其初始化顺序的问题可能造成后续的初始化Permission造成影响。
realm=com.github.zhangkaitao.shiro.chapter3.realm.MyRealm
securityManager.realms=$realm
