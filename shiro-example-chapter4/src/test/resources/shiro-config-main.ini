[main]
#其构造器必须是public空参构造器，通过反射创建相应的实例。
securityManager=org.apache.shiro.mgt.DefaultSecurityManager

#authenticator
authenticator=com.github.zhangkaitao.shiro.chapter4.authenticator.MyAuthenticator

#默认需要使用Base64进行编码，也可以使用0x十六进制。
#base64 byte[]
authenticator.bytes=aGVsbG8=
#hex byte[]
authenticator.bytes=0x68656c6c6f

#Array/Set/List setter注入  多个之间通过“，”分割
authenticator.array=1,2,3
authenticator.set=$jdbcRealm,$jdbcRealm
#Map setter注入
#即格式是：map=key：value，key：value，可以注入常量及引用值，常量的话都看作字符串（即使有泛型也不会自动造型）。
authenticator.map=$jdbcRealm:$jdbcRealm,1:1,key:abc

authenticationStrategy=org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy
authenticator.authenticationStrategy=$authenticationStrategy
securityManager.authenticator=$authenticator

#authorizer
authorizer=org.apache.shiro.authz.ModularRealmAuthorizer
permissionResolver=org.apache.shiro.authz.permission.WildcardPermissionResolver
authorizer.permissionResolver=$permissionResolver
securityManager.authorizer=$authorizer

#realm
dataSource=com.alibaba.druid.pool.DruidDataSource
dataSource.driverClassName=com.mysql.jdbc.Driver
dataSource.url=jdbc:mysql://localhost:3306/shiro
dataSource.username=root
dataSource.password=root

jdbcRealm=org.apache.shiro.realm.jdbc.JdbcRealm
jdbcRealm.dataSource=$dataSource
#会自动调用jdbcRealm.setPermissionsLookupEnabled(true)，对于这种常量值会自动类型转换
jdbcRealm.permissionsLookupEnabled=true
securityManager.realms=$jdbcRealm

#[users]
#提供了对用户/密码及其角色的配置，用户名=密码，角色1，角色2
#username=password,role1,role2
#角色部分可省略
#wang=123


#[roles]
#提供了角色及权限之间关系的配置，角色=权限1，权限2
#如果只有角色没有对应的权限，可以不配roles，具体规则请参考授权章节。
#role1=permission1,permission2
#role1=user:create,user:update
#role2=*


#[urls]
#用于web，提供了对web url拦截相关的配置，url=拦截器[参数]，拦截器
#/index.html = anon
#/admin/** = authc, roles[admin], perms["permission1"]