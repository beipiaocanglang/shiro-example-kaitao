[main]
#校验用户输入5次错误密码 的提示  校验密码机密/解密
credentialsMatcher=com.github.zhangkaitao.shiro.chapter11.credentials.RetryLimitHashedCredentialsMatcher
#加密/解密算法名称
credentialsMatcher.hashAlgorithmName=md5
#加密次数
credentialsMatcher.hashIterations=2
credentialsMatcher.storedCredentialsHexEncoded=true

#自定义realm
userRealm=com.github.zhangkaitao.shiro.chapter11.realm.UserRealm
userRealm.credentialsMatcher=$credentialsMatcher
#启用缓存，默认false；
userRealm.cachingEnabled=true
#启用身份验证缓存，即缓存AuthenticationInfo信息，默认false；
userRealm.authenticationCachingEnabled=true
#缓存AuthenticationInfo信息的缓存名称；
userRealm.authenticationCacheName=authenticationCache
#启用授权缓存，即缓存AuthorizationInfo信息，默认false；
userRealm.authorizationCachingEnabled=true
#缓存AuthorizationInfo信息的缓存名称；
userRealm.authorizationCacheName=authorizationCache
securityManager.realms=$userRealm

#缓存管理器，此处使用EhCacheManager，即Ehcache实现，需要导入相应的Ehcache依赖，请参考pom.xml；
cacheManager=org.apache.shiro.cache.ehcache.EhCacheManager
#加载缓存配置文件
cacheManager.cacheManagerConfigFile=classpath:shiro-ehcache.xml
#设置SecurityManager的CacheManager
securityManager.cacheManager=$cacheManager

# session回话管理 session回话的存储和持久化
# 如securityManager实现了SessionsSecurityManager，
# 其会自动判断SessionManager是否实现了CacheManagerAware接口，如果实现了会把CacheManager设置给它。
# 然后sessionManager会判断相应的sessionDAO（如继承自CachingSessionDAO）是否实现了CacheManagerAware，
# 如果实现了会把CacheManager设置给它；
# 如第九章的MySessionDAO就是带缓存的SessionDAO；
# 其会先查缓存，如果找不到才查数据库。
sessionManager=org.apache.shiro.session.mgt.DefaultSessionManager
#CachingSessionDAO，可以通过如下配置设置缓存的名称
sessionDAO=com.github.zhangkaitao.shiro.chapter11.session.dao.MySessionDAO
sessionDAO.activeSessionsCacheName=shiro-activeSessionCache

securityManager.sessionManager=$sessionManager


