[main]
#此处最需要注意的就是HashedCredentialsMatcher的算法需要和生成密码时的算法一样。
credentialsMatcher=org.apache.shiro.authc.credential.HashedCredentialsMatcher
#指定散列算法为md5，需要和生成密码时的一样
credentialsMatcher.hashAlgorithmName=md5
#散列迭代次数，需要和生成密码时的一样
credentialsMatcher.hashIterations=2
#表示是否存储散列后的密码为16进制，需要和生成密码时的一样，默认是base64
credentialsMatcher.storedCredentialsHexEncoded=true

dataSource=com.alibaba.druid.pool.DruidDataSource
dataSource.driverClassName=com.mysql.jdbc.Driver
dataSource.url=jdbc:mysql://localhost:3306/shiro
dataSource.username=root
dataSource.password=root

jdbcRealm=org.apache.shiro.realm.jdbc.JdbcRealm
jdbcRealm.dataSource=$dataSource
jdbcRealm.permissionsLookupEnabled=true
#saltStyle表示使用密码+盐的机制，
jdbcRealm.saltStyle=COLUMN
#指定密码及盐查询SQL。authenticationQuery第一列是密码，第二列是盐；
jdbcRealm.authenticationQuery=select password, concat(username,password_salt) from users where username = ?
jdbcRealm.credentialsMatcher=$credentialsMatcher
securityManager.realms=$jdbcRealm
