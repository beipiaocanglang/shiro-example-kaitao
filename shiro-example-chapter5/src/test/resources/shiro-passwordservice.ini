[main]
# 重新 PasswordService 的实现类DefaultPasswordService
passwordService=org.apache.shiro.authc.credential.DefaultPasswordService
# hashService定义散列密码使用的HashService，默认使用DefaultHashService（默认SHA-256算法）；
hashService=org.apache.shiro.crypto.hash.DefaultHashService
passwordService.hashService=$hashService

# hashFormat用于对散列出的值进行格式化，默认使用Shiro1CryptFormat，
# 另外提供了Base64Format和HexFormat，对于有salt的密码请自定义实现ParsableHashFormat然后把salt格式化到散列值中；
hashFormat=org.apache.shiro.crypto.hash.format.Shiro1CryptFormat
passwordService.hashFormat=$hashFormat

# hashFormatFactory用于根据散列值得到散列的密码和salt；
# 因为如果使用如SHA算法，那么会生成一个salt，此salt需要保存到散列后的值中以便之后与传入的密码比较时使用；
# 默认使用DefaultHashFormatFactory；
hashFormatFactory=org.apache.shiro.crypto.hash.format.DefaultHashFormatFactory
passwordService.hashFormatFactory=$hashFormatFactory

# passwordMatcher使用PasswordMatcher，其是一个CredentialsMatcher实现
passwordMatcher=org.apache.shiro.authc.credential.PasswordMatcher
passwordMatcher.passwordService=$passwordService

myRealm=com.github.zhangkaitao.shiro.chapter5.hash.realm.MyRealm
myRealm.passwordService=$passwordService
# 将credentialsMatcher赋值给myRealm，myRealm间接继承了AuthenticatingRealm，
# 其在调用getAuthenticationInfo方法获取到AuthenticationInfo信息后，会使用credentialsMatcher来验证凭据是否匹配，
# 如果不匹配将抛出IncorrectCredentialsException异常。
myRealm.credentialsMatcher=$passwordMatcher
securityManager.realms=$myRealm
